apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-confd
  namespace: {{ .Release.Namespace }}
data:
  geonode.conf: |
    server {
      listen 80 default_server;
      listen [::]:80 default_server;

      # resolver is required because we use variables as upstream
      # resolver kube-dns.kube-system.svc 8.8.8.8 8.8.4.4 valid=300s;

      include /etc/nginx/mime.types;

      # This is the main geonode conf
      charset     utf-8;

      # max upload size
      client_max_body_size 100G;
      client_body_buffer_size 256K;
      large_client_header_buffers 4 64k;
      proxy_read_timeout 600s;

      fastcgi_hide_header Set-Cookie;

      etag on;

      # compression
      gzip on;
      gzip_vary on;
      gzip_proxied any;
      gzip_http_version 1.1;
      gzip_disable "MSIE [1-6]\.";
      gzip_buffers 16 8k;
      gzip_min_length 1100;
      gzip_comp_level 6;
      gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        application/xml
        application/xml+rss
        application/javascript
        application/x-javascript
        application/json;

      location = /favicon.ico {
        alias /mnt/volumes/statics/static/img/favicon.ico;
      }


      # GeoNode
      location /static/ {
        alias /mnt/volumes/statics/static/;
        client_max_body_size {{ .Values.nginx.maxClientBodySize }};

        location ~* \.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
        }
      }

      # GeoNode Upload
      location /uploaded/ {
        client_max_body_size {{ .Values.nginx.maxClientBodySize }};

        alias /mnt/volumes/statics/uploaded/;
        location ~* \.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
{{- if .Values.nginx.external_cors.enabled }}
          add_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        }
      }

      location ~ ^/celery-monitor/? {
        # Using a variable is a trick to let Nginx start even if upstream host is not up yet
        # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
        set $upstream {{ include "geonode_pod_name" . }}:5555;

        rewrite ^/celery-monitor/?(.*)$ /$1 break;

        sub_filter '="/' '="/celery-monitor/';
        sub_filter_last_modified on;
        sub_filter_once off;

        # proxy_pass http://unix:/tmp/flower.sock:/;
        proxy_pass http://$upstream;
        proxy_redirect off;
{{- if .Values.nginx.external_cors.enabled }}
        proxy_set_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
      }


{{if (eq .Values.geonode.ingress.enabled false) }}
      # GeoServer
      location /geoserver {
        client_max_body_size {{ .Values.nginx.maxClientBodySize }};

{{- if .Values.nginx.external_cors.enabled }}
        proxy_set_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://{{ include "geoserver_pod_name" . }}:{{ .Values.geoserver.port }};
      }

{{ if .Values.pycsw.enabled }}
      # external PYCSW forward 
      location {{ .Values.pycsw.endpoint }} {
        client_max_body_size {{ .Values.nginx.maxClientBodySize }};

        # compression
        gzip on;
        gzip_types
          text/xml
          text/plain
          application/xml
          application/xml+rss
          application/json;

        proxy_pass http://{{ include "pycsw_pod_name" . }}:{{ .Values.pycsw.port }};
        proxy_set_header Host $host;
{{- if .Values.nginx.external_cors.enabled }}
        proxy_set_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
{{ end }}
{{ end }}
      location / {
        client_max_body_size {{ .Values.nginx.maxClientBodySize }};

        # FIXME: Work around /proxy sometimes using a mix of public/internal URL to geonode...
        rewrite_log on;
        #rewrite ^/proxy/(.*)url=http?://{{ .Values.geonode.general.externalDomain  }}(:\d+)?/geoserver(.*) /proxy/$1url=http://geoserver:{{ .Values.geoserver.port }}$3 last;

        if ($request_method = OPTIONS) {
{{- if .Values.nginx.external_cors.enabled }}
          add_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
          add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";
          add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
          add_header Access-Control-Allow-Credentials true;
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          add_header Access-Control-Max-Age 1728000;
          return 200;
        }

{{- if .Values.nginx.external_cors.enabled }}
        add_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        add_header Access-Control-Allow-Credentials {{ .Values.nginx.access_control_allow.credentials }};
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, Origin, User-Agent";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";

        proxy_connect_timeout       600s;
        proxy_send_timeout          600s;
        proxy_read_timeout          600s;
        send_timeout                600s;
        proxy_redirect              off;
        proxy_set_header            Host $host;
        proxy_set_header            X-Real-IP $remote_addr;
        proxy_set_header            X-Forwarded-Host $server_name;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Proto $scheme;
{{- if .Values.nginx.external_cors.enabled }}
        proxy_set_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}

        # uwsgi_params
        include /etc/nginx/uwsgi_params;

        # proxy_pass http://$upstream;
        uwsgi_pass {{ include "geonode_pod_name" . }}:8000;
        uwsgi_read_timeout 300s;
        # when a client closes the connection then keep the channel to uwsgi open. Otherwise uwsgi throws an IOError
        uwsgi_ignore_client_abort on;

        # uwsgi_params
        include /etc/nginx/uwsgi_params;

        location ~* \.(?:js|jpg|jpeg|gif|png|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
{{- if .Values.nginx.external_cors.enabled }}
          add_header Access-Control-Allow-Origin {{ .Values.nginx.external_cors.domain }};
{{ end }}
        }
      }
    }
