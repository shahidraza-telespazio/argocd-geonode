# geoserver stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "geoserver_pod_name" . }}"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      org.geonode.instance: "{{ include "geoserver_pod_name" . }}"
  serviceName: "{{ include "geoserver_pod_name" . }}"
  replicas: 1
  template:
    metadata:
      labels:
        org.geonode.instance: "{{ include "geoserver_pod_name" . }}"
      annotations:
        checksum/geoserver-env: {{ include (print $.Template.BasePath "/geoserver/geoserver-env.yaml") . | sha256sum }}
        checksum/geoserver-secret: {{ include (print $.Template.BasePath "/geoserver/geoserver-secret.yaml") . | sha256sum }}

    spec:
      terminationGracePeriodSeconds: 3
      initContainers:
      - name: {{ .Values.geoserver_data.container_name }}
        image: "{{ .Values.geoserver_data.image.name }}:{{ .Values.geoserver_data.image.tag }}"
        imagePullPolicy: {{ .Values.geoserver_data.imagePullPolicy }}
        command:
        - sh
        - -c
        - |
          if [ ! -f /geoserver_data/data/.geoserver_data_copied ] ; then
            # Copy defaults from data container
            echo "copying geoserver_data files into volume ..."
            cp -r /tmp/geonode/downloaded/data/* /geoserver_data/data/
            touch /geoserver_data/data/.geoserver_data_copied
          else
            echo "geoserver_data files already exists, skipping copy ..."
          fi
        envFrom:
        - configMapRef:
            name:  {{ include "geoserver_pod_name" . }}-env
        - secretRef:
            name: {{ .Values.geoserver.secret.existingSecretName | default (include "geoserver_secret_name" .) | quote }}
        volumeMounts:
        - name: "{{ include "persistant_volume_name" . }}"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: geoserver-notifier-xml
          mountPath: /overrides

{{- if not (empty .Values.geoserver.imagePullSecret) }}
      imagePullSecrets:
      - name: {{ .Values.geoserver.imagePullSecret }}
{{ end }}

      containers:
      - name: {{ .Values.geoserver.container_name }}
        image: "{{ .Values.geoserver.image.name }}:{{ .Values.geoserver.image.tag }}"
        imagePullPolicy: {{ .Values.geoserver.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.geoserver.port }}

        envFrom:
        - configMapRef:
            name:  {{ include "geoserver_pod_name" . }}-env
        - secretRef:
            name: {{ .Values.geoserver.secret.existingSecretName | default (include "geoserver_secret_name" .) | quote }}

        env:
          # read auto generated password from secret
          - name: GEONODE_GEODATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "database_geodata_password_secret_key_ref" . }}
                key: {{ include "database_geodata_password_key_ref" . }}
          {{- with .Values.geoserver.extraPodEnv }}
          {{- tpl . $ | nindent 10 }}
          {{- end }}

        volumeMounts:
        - name: "{{ include "persistant_volume_name" . }}"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: "{{ include "persistant_volume_name" . }}"
          mountPath: /mnt/volumes/statics
          subPath: statics
        
        readinessProbe:
          tcpSocket:
            port: {{ .Values.geoserver.port }}
          periodSeconds: 5
          failureThreshold: 15
        livenessProbe:
          tcpSocket:
            port: {{ .Values.geoserver.port }}
          initialDelaySeconds: 90
          periodSeconds: 5
          failureThreshold: 15

        resources:
          requests:
            memory: {{ .Values.geoserver.resources.requests.memory }}
            cpu: {{ .Values.geoserver.resources.requests.cpu }}
          limits:
            memory: {{ .Values.geoserver.resources.limits.memory }}
            cpu: {{ .Values.geoserver.resources.limits.cpu }}

      volumes:
      - name: geoserver-notifier-xml
        configMap:
          name: {{ .Release.Name }}-geoserver-notifier-xml
      - name: "{{ include "persistant_volume_name" . }}"
        persistentVolumeClaim:
          claimName: pvc-{{ .Release.Name }}-geonode
