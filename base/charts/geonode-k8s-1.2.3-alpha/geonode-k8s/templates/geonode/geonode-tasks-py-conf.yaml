apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-geonode-tasks-py
data:
  tasks.py: |
    # -*- coding: utf-8 -*-
    #########################################################################
    #
    # Copyright (C) 2016 OSGeo
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program. If not, see <http://www.gnu.org/licenses/>.
    #
    #########################################################################
    import os
    import re
    import ast
    import json
    import time
    import logging
    import datetime
    import requests

    from urllib.parse import urlparse, urlunparse
    from invoke import task

    logger = logging.getLogger(__name__)

    GEOSERVER_STORE_NAME = "geogeonode"
    GEOSERVER_WORKSPACE_NAME = "geonode"

    @task
    def waitfordbs(ctx):
        print("**************************databases*******************************")
        db_host = os.getenv('DATABASE_HOST', 'db')
        ctx.run(f"/usr/bin/wait-for-databases {db_host}", pty=True)


    @task
    def waitforgeoserver(ctx):
        print("****************************geoserver********************************")
        while not _gs_service_availability(f"{os.environ['GEOSERVER_LOCATION']}ows"):
            print("Wait for GeoServer API availability...")
        print("GeoServer is available for HTTP calls!")

    @task
    def update(ctx):
        print("***************************setting env*********************************")
        ctx.run("env", pty=True)
        db_url = _update_db_connstring()
        geodb_url = _update_geodb_connstring()

        override_env = "$HOME/.override_env"
        if os.path.exists(override_env):
            os.remove(override_env)

        envs = {
            "local_settings": str(_localsettings()),
            "siteurl": os.environ.get("SITEURL"),
            "public_fqdn":  os.environ.get("SITEURL"),
            "public_host":  os.environ.get("SITEURL"),
            "dburl": os.environ.get("DATABASE_URL", db_url),
            "geodburl": os.environ.get("GEODATABASE_URL", geodb_url),
            "static_root": os.environ.get("STATIC_ROOT", "/mnt/volumes/statics/static/"),
            "media_root": os.environ.get("MEDIA_ROOT", "/mnt/volumes/statics/uploaded/"),
            "geoip_path": os.environ.get("GEOIP_PATH", "/mnt/volumes/statics/geoip.db"),
            "monitoring": os.environ.get("MONITORING_ENABLED", True),
            "monitoring_host_name": os.environ.get("MONITORING_HOST_NAME", "geonode"),
            "monitoring_service_name": os.environ.get("MONITORING_SERVICE_NAME", "local-geonode"),
            "monitoring_data_ttl": os.environ.get("MONITORING_DATA_TTL", 7),
            "geonode_geodb_passwd": os.environ.get("GEONODE_GEODATABASE_PASSWORD"),
            "default_backend_datastore": os.environ.get("DEFAULT_BACKEND_DATASTORE"),
            "geonode_db_passwd": os.environ.get("GEONODE_DATABASE_PASSWORD"),
            "geonode_geodb": os.environ.get("GEONODE_GEODATABASE"),
            "db_url": os.environ.get("DATABASE_URL"),
            "geodb_url": os.environ.get("GEODATABASE_URL"),
            "geonode_db": os.environ.get("GEONODE_DATABASE"),
            "gs_loc": os.environ.get('GEOSERVER_LOCATION'),
            "gs_web_ui_loc": os.environ.get("GEOSERVER_WEB_UI_LOCATION"),
            "gs_pub_loc": os.environ.get("GEOSERVER_PUBLIC_LOCATION"),
            "gs_admin_pwd": os.environ.get("GEOSERVER_ADMIN_PASSWORD"),
            "override_fn": override_env,
        }

        try:
            current_allowed = ast.literal_eval(
                os.getenv('ALLOWED_HOSTS') or
                "['{public_fqdn}', '{public_host}', 'localhost', 'django', '{{ include "geonode_pod_name" . }}',]".format(**envs))
        except ValueError:
            current_allowed = []
        allowed_hosts = [str(c) for c in current_allowed] + ['"{{ include "geonode_pod_name" . }}"', '"django"']

        ctx.run(
            "echo export DJANGO_SETTINGS_MODULE=\
    {local_settings} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_ENABLED=\
    {monitoring} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_HOST_NAME=\
    {monitoring_host_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_SERVICE_NAME=\
    {monitoring_service_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_DATA_TTL=\
    {monitoring_data_ttl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE_PASSWORD=\
    {geonode_geodb_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DEFAULT_BACKEND_DATASTORE=\
    {default_backend_datastore} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE_PASSWORD=\
    {geonode_db_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE=\
    {geonode_geodb} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {db_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodb_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE=\
    {geonode_db} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_LOCATION=\
    {gs_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_WEB_UI_LOCATION=\
    {gs_web_ui_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_PUBLIC_LOCATION=\
    {gs_pub_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_ADMIN_PASSWORD=\
    {gs_admin_pwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export SITEURL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            'echo export ALLOWED_HOSTS=\
    "\\"{}\\"" >> {override_fn}'.format(
                allowed_hosts, **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {dburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export STATIC_ROOT=\
    {static_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MEDIA_ROOT=\
    {media_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_URL=\
    {siteurl}account/login/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_URL=\
    {siteurl}account/logout/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(f"source {override_env}", pty=True)
        print("****************************finalize env**********************************")
        ctx.run("env", pty=True)


    @task
    def migrations(ctx):
        print("**************************migrations*******************************")
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()}", pty=True)
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()} --database=datastore", pty=True)
        try:
            ctx.run(f"python manage.py rebuild_index --noinput --settings={_localsettings()}", pty=True)
        except Exception:
            pass

    @task
    def statics(ctx):
        print("**************************statics*******************************")
        try:
            static_root = os.environ.get("STATIC_ROOT", "/mnt/volumes/statics/static/")
            media_root = os.environ.get("MEDIA_ROOT", "/mnt/volumes/statics/uploaded/")

            ctx.run(f"mkdir -pv {static_root} {media_root}")
            ctx.run(
                f"python manage.py collectstatic --noinput --settings={_localsettings()}",
                pty=True,
            )
        except Exception:
            import traceback

            traceback.print_exc()


    @task
    def prepare(ctx):
        print("**********************prepare fixture***************************")
        ctx.run("rm -rf /tmp/default_oauth_apps_docker.json", pty=True)
        _prepare_oauth_fixture()
        ctx.run("rm -rf /tmp/default_site.json", pty=True)
        _prepare_site_fixture()


    @task
    def fixtures(ctx):
        print("**************************fixtures********************************")
        ctx.run(
            f"python manage.py loaddata sample_admin \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata /tmp/default_oauth_apps_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata /tmp/default_site.json \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata {{ include "initial_data_path" . }} \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectstatic(ctx):
        print("************************static artifacts******************************")
        ctx.run(
            f"django-admin collectstatic --noinput \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def geoserverfixture(ctx):
        print("********************geoserver fixture********************************")
        _set_geoserver_database_store()

    @task
    def monitoringfixture(ctx):
        print("*******************monitoring fixture********************************")
        ctx.run("rm -rf /tmp/default_monitoring_apps_docker.json", pty=True)
        _prepare_monitoring_fixture()
        try:
            ctx.run(
                f"django-admin loaddata /tmp/default_monitoring_apps_docker.json \
    --settings={_localsettings()}",
                pty=True,
            )
        except Exception as e:
            logger.error(f"ERROR installing monitoring fixture: {str(e)}")

    @task
    def updategeoip(ctx):
        print("**************************update geoip*******************************")
        if ast.literal_eval(os.environ.get("MONITORING_ENABLED", "False")):
            ctx.run(f"django-admin updategeoip --settings={_localsettings()}", pty=True)

    @task
    def updateadmin(ctx):
        print("***********************update admin details**************************")
        ctx.run("rm -rf /tmp/django_admin_docker.json", pty=True)
        _prepare_admin_fixture(
            os.environ.get("ADMIN_PASSWORD", "admin"), os.environ.get("ADMIN_EMAIL", "admin@example.org")
        )
        ctx.run(
            f"django-admin loaddata /tmp/django_admin_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectmetrics(ctx):
        print("************************collect metrics******************************")
        ctx.run(
            f"python -W ignore manage.py collect_metrics  \
    --settings={_localsettings()} -n -t xml",
            pty=True,
        )

    @task
    def initialized(ctx):
        print("**************************init file********************************")
        ctx.run("date > /mnt/volumes/statics/geonode_init.lock")

    @task
    def prescript(ctx):
        print("**********************geonode-k8s pre ***************************")
        {{ .Values.geonode.tasks_pre_script | indent 8 | trim }}

    @task
    def postscript(ctx):
        print("**********************geonode-k8s post ***************************")
        {{ .Values.geonode.tasks_post_script | indent 8 | trim }}


    def _update_db_connstring():
        user = os.getenv('GEONODE_DATABASE', 'geonode')
        pwd = os.getenv('GEONODE_DATABASE_PASSWORD', 'geonode')
        dbname = os.getenv('GEONODE_DATABASE', 'geonode')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        connstr = f'postgis://{user}:{pwd}@{dbhost}:{dbport}/{dbname}'
        return connstr


    def _update_geodb_connstring():
        geouser = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        geopwd = os.getenv('GEONODE_GEODATABASE_PASSWORD', 'geonode_data')
        geodbname = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        geoconnstr = f'postgis://{geouser}:{geopwd}@{dbhost}:{dbport}/{geodbname}'
        return geoconnstr


    def _localsettings():
        settings = os.getenv('DJANGO_SETTINGS_MODULE', 'geonode.settings')
        return settings


    def _gs_service_availability(url):
        import requests
        try:
            r = requests.request("get", url, verify=False)
            r.raise_for_status()  # Raises a HTTPError if the status is 4xx, 5xxx
        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:
            logger.error(f"GeoServer connection error is {e}")
            return False
        except requests.exceptions.HTTPError as er:
            logger.error(f"GeoServer HTTP error is {er}")
            return False
        else:
            logger.info("GeoServer API are available!")
            return True


    def _prepare_oauth_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "oauth2_provider.application",
                "pk": 1001,
                "fields": {
                    "skip_authorization": True,
                    "created": "2018-05-31T10:00:31.661Z",
                    "updated": "2018-05-31T11:30:31.245Z",
                    "algorithm": "RS256",
                    "redirect_uris": f"{urlunparse(upurl)}geoserver/index.html",
                    "name": "GeoServer",
                    "authorization_grant_type": "authorization-code",
                    "client_type": "confidential",
                    "client_id": str(os.environ["OAUTH2_CLIENT_ID"]),
                    "client_secret": str(os.environ["OAUTH2_CLIENT_SECRET"]),
                    "user": ["admin"],
                },
            }
        ]
        with open("/tmp/default_oauth_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_site_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "sites.site",
                "pk": 1,
                "fields": {"domain": str(upurl.hostname), "name": str(upurl.hostname)},
            }
        ]
        with open("/tmp/default_site.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_monitoring_fixture():
        pub_ip = os.getenv('GEONODE_LB_HOST_IP')
        print(f"Public Hostname or IP is {pub_ip}")
        pub_port = os.getenv('GEONODE_LB_PORT')
        print(f"Public PORT is {pub_port}")

        d = "1970-01-01 00:00:00"
        default_fixture = [
            {
                "fields": {"active": True, "ip": str(pub_ip), "name": str(os.environ["MONITORING_HOST_NAME"])},
                "model": "monitoring.host",
                "pk": 1,
            },
            {"fields": {"active": True, "ip": "{{ include "geoserver_pod_name" . }}", "name": "geoserver"}, "model": "monitoring.host", "pk": 2},
            {
                "fields": {
                    "name": str(os.environ["MONITORING_SERVICE_NAME"]),
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 1,
                },
                "model": "monitoring.service",
                "pk": 1,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeonode",
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 3,
                },
                "model": "monitoring.service",
                "pk": 2,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 4,
                },
                "model": "monitoring.service",
                "pk": 3,
            },
            {
                "fields": {
                    "name": "default-geoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 2,
                },
                "model": "monitoring.service",
                "pk": 4,
            },
        ]
        with open("/tmp/default_monitoring_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_admin_fixture(admin_password, admin_email):
        from django.contrib.auth.hashers import make_password

        d = datetime.datetime.now()
        mdext_date = f"{d.isoformat()[:23]}Z"
        default_fixture = [
            {
                "fields": {
                    "date_joined": mdext_date,
                    "email": admin_email,
                    "first_name": "",
                    "groups": [],
                    "is_active": True,
                    "is_staff": True,
                    "is_superuser": True,
                    "last_login": mdext_date,
                    "last_name": "",
                    "password": make_password(admin_password),
                    "user_permissions": [],
                    "username": "admin",
                },
                "model": "people.Profile",
                "pk": 1000,
            }
        ]
        with open("/tmp/django_admin_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    ##############################################################
    # added by mwall for https://github.com/zalf-rdm/geonode-k8s #
    ##############################################################
    def _set_geoserver_database_store():
        ''' checks if a db store is already created in geoserver, if not create one '''

        print("Check if geoserver store is already set up ...")
        url = '{}rest/workspaces/{}/datastores/'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        headers = {'Content-Type': 'text/xml'}
        auth = (os.environ.get("GEOSERVER_ADMIN_USER"), os.getenv('GEOSERVER_ADMIN_PASSWORD'))

        try:
            r = requests.get(url, headers=headers, auth=auth)
            data = r.json()
            for datastore in data["dataStores"]["dataStore"]:
                if datastore["name"] == GEOSERVER_STORE_NAME:
                    print("Found datastore \"{}\" on geoserver, skipping creation ... ".format(GEOSERVER_STORE_NAME))
                    return
        except:
            print("ERROR: Could not get datastore information from geoserver, trying to create ...")

        print("create new datastore \"{}\" on geoserver ...".format(GEOSERVER_STORE_NAME))
        db_user = database = os.getenv('GEONODE_GEODATABASE')
        db_password = os.getenv('GEONODE_GEODATABASE_PASSWORD')
        db_host = os.getenv('DATABASE_HOST')
        db_port = os.getenv('DATABASE_PORT')
        url = '{}rest/workspaces/{}/datastores'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        data = """
              <dataStore>
                <name>{}</name>
                <connectionParameters>
                  <host>{}</host>
                  <port>{}</port>
                  <database>{}</database>
                  <user>{}</user>
                  <passwd>{}</passwd>
                  <dbtype>postgis</dbtype>
                </connectionParameters>
              </dataStore>
            """.format(GEOSERVER_STORE_NAME, db_host, db_port, database, db_user, db_password)
        try:
            r = requests.post(url, headers=headers, auth=auth,data=data)
            print("Datastore created ...")
        except:
            print("ERROR: Something went wrong while creating datastore ...")
            return
