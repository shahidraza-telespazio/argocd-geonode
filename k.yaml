apiVersion: v1
kind: Namespace
metadata:
  name: geonode
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
  name: geonode-k8s-memcached
  namespace: geonode
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq
  namespace: geonode
secrets:
- name: geonode-k8s-rabbitmq
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq-endpoint-reader
  namespace: geonode
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq-endpoint-reader
  namespace: geonode
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: geonode-k8s-rabbitmq-endpoint-reader
subjects:
- kind: ServiceAccount
  name: geonode-k8s-rabbitmq
  namespace: geonode
---
apiVersion: v1
data:
  entrypoint.sh: "#!/bin/bash\n\n# Exit script in case of error\nset -e\n\nINVOKE_LOG_STDOUT=${INVOKE_LOG_STDOUT:-FALSE}\ninvoke
    () {\n    if [ $INVOKE_LOG_STDOUT = 'true' ] || [ $INVOKE_LOG_STDOUT = 'True'
    ]\n    then\n        /usr/local/bin/invoke $@\n    else\n        /usr/local/bin/invoke
    $@ > /usr/src/geonode/invoke.log 2>&1\n    fi\n    echo \"$@ tasks done\"\n}\n\n#
    Start cron && memcached services\nservice cron restart\n\necho $\"\\n\\n\\n\"\necho
    \"-----------------------------------------------------\"\necho \"STARTING DJANGO
    ENTRYPOINT $(date)\"\necho \"-----------------------------------------------------\"\n\ninvoke
    update\n\nsource $HOME/.bashrc\nsource $HOME/.override_env\n\necho DOCKER_API_VERSION=$DOCKER_API_VERSION\necho
    POSTGRES_USER=$POSTGRES_USER\necho POSTGRES_PASSWORD=$POSTGRES_PASSWORD\necho
    DATABASE_URL=$DATABASE_URL\necho GEODATABASE_URL=$GEODATABASE_URL\necho SITEURL=$SITEURL\necho
    ALLOWED_HOSTS=$ALLOWED_HOSTS\necho GEOSERVER_PUBLIC_LOCATION=$GEOSERVER_PUBLIC_LOCATION\necho
    MONITORING_ENABLED=$MONITORING_ENABLED\necho MONITORING_HOST_NAME=$MONITORING_HOST_NAME\necho
    MONITORING_SERVICE_NAME=$MONITORING_SERVICE_NAME\necho MONITORING_DATA_TTL=$MONITORING_DATA_TTL\n#
    deactivated until https://github.com/GeoNode/geonode/pull/11340 is merged\n#invoke
    waitfordbs\n\ncmd=\"$@\"\n\nif [ ${IS_CELERY} = \"true\" ]  || [ ${IS_CELERY}
    = \"True\" ]\nthen\n    echo \"Executing Celery server $cmd for Production\"\nelse\n
    \   invoke prescript\n    invoke migrations\n    invoke prepare\n\n    if [ ${FORCE_REINIT}
    = \"true\" ]  || [ ${FORCE_REINIT} = \"True\" ] || [ ! -e \"/mnt/volumes/statics/geonode_init.lock\"
    ]; then\n        invoke updategeoip\n        invoke fixtures\n        # currently
    not implemented in geonode-k8s\n        # invoke monitoringfixture\n        invoke
    initialized\n        invoke updateadmin\n    fi\n\n    invoke statics\n    invoke
    waitforgeoserver\n    invoke geoserverfixture\n    invoke postscript\n    echo
    \"Executing UWSGI server $cmd for Production\"\nfi\n\necho \"-----------------------------------------------------\"\necho
    \"FINISHED DJANGO ENTRYPOINT --------------------------\"\necho \"-----------------------------------------------------\"\n\n#
    Run the CMD \necho \"got command $cmd\"\nexec $cmd\n"
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-entrypoint-sh
  namespace: geonode
---
apiVersion: v1
data:
  ACCOUNT_APPROVAL_REQUIRED: "False"
  ACCOUNT_AUTHENTICATION_METHOD: username_email
  ACCOUNT_CONFIRM_EMAIL_ON_GET: "True"
  ACCOUNT_EMAIL_CONFIRMATION_REQUIRED: "True"
  ACCOUNT_EMAIL_REQUIRED: "True"
  ACCOUNT_EMAIL_VERIFICATION: "False"
  ACCOUNT_OPEN_SIGNUP: "True"
  ADMIN_MODERATE_UPLOADS: "False"
  ALLOWED_HOSTS: '[''django'', ''*'', ''geonode'']'
  API_LIMIT_PER_PAGE: "1000"
  API_LOCKDOWN: "False"
  ASYNC_SIGNALS: "True"
  AUTO_ASSIGN_REGISTERED_MEMBERS_TO_REGISTERED_MEMBERS_GROUP_NAME: "True"
  AVATAR_DEFAULT_URL: /geonode/img/avatar.png
  AVATAR_GRAVATAR_SSL: "True"
  BROKER_URL: amqp://rabbituser:rabbit_password@geonode-k8s-rabbitmq:5672/
  BUILD_NUMBER: "0"
  C_FORCE_ROOT: "1"
  CACHE_BUSTING_MEDIA_ENABLED: "False"
  CACHE_BUSTING_STATIC_ENABLED: "False"
  CATALOGUE_ENGINE: geonode.catalogue.backends.pycsw_http
  CATALOGUE_URL: http://geonode/catalogue/csw
  CELERY_BEAT_SCHEDULER: celery.beat:PersistentScheduler
  CENTRALIZED_DASHBOARD_ENABLED: "False"
  CLIENT_RESULTS_LIMIT: "25"
  CORS_ORIGIN_ALLOW_ALL: "True"
  CREATE_LAYER: "True"
  DATABASE_HOST: geonode-postgresql
  DATABASE_PORT: "5432"
  DEBUG: "True"
  DEBUG_STATIC: "True"
  DEFAULT_ANONYMOUS_DOWNLOAD_PERMISSION: "True"
  DEFAULT_ANONYMOUS_VIEW_PERMISSION: "True"
  DEFAULT_BACKEND_DATASTORE: datastore
  DEFAULT_BACKEND_UPLOADER: geonode.importer
  DEFAULT_MAX_PARALLEL_UPLOADS_PER_USER: "100"
  DEFAULT_MAX_UPLOAD_SIZE: "5368709120"
  DISPLAY_COMMENTS: "True"
  DISPLAY_ORIGINAL_DATASET_LINK: "True"
  DISPLAY_RATINGS: "True"
  DISPLAY_SOCIAL: "True"
  DISPLAY_WMS_LINKS: "True"
  DJANGO_EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
  DJANGO_EMAIL_HOST: smtp.gmail.com
  DJANGO_EMAIL_PORT: "587"
  DJANGO_EMAIL_USE_SSL: "False"
  DJANGO_EMAIL_USE_TLS: "True"
  DJANGO_SETTINGS_MODULE: geonode.settings
  DOCKERIZE_VERSION: v0.6.1
  EMAIL_ENABLE: "False"
  EXIF_ENABLED: "True"
  FAVORITE_ENABLED: "True"
  FIXTURE_DIRS: '[ ''/usr/src/geonode/geonode/fixtures'' ]'
  FORCE_REINIT: "true"
  FREETEXT_KEYWORDS_READONLY: "False"
  GEOIP_PATH: /mnt/volumes/statics/geoip.db
  GEONODE_CLIENT_LAYER_PREVIEW_LIBRARY: mapstore
  GEONODE_DATABASE: geonode
  GEONODE_DATABASE_SCHEMA: public
  GEONODE_DB_CONN_MAX_AGE: "0"
  GEONODE_DB_CONN_TOUT: "5"
  GEONODE_GEODATABASE: geodata
  GEONODE_GEODATABASE_SCHEMA: public
  GEONODE_INSTANCE_NAME: geonode-k8s
  GEONODE_LB_HOST_IP: geonode
  GEOSERVER_LOCATION: http://geonode-k8s-geoserver:8080/geoserver/
  GEOSERVER_PUBLIC_LOCATION: http://geonode/geoserver/
  GEOSERVER_PUBLIC_SCHEMA: http
  GEOSERVER_WEB_UI_LOCATION: http://geonode/geoserver/
  HAYSTACK_ENGINE_INDEX_NAME: haystack
  HAYSTACK_ENGINE_URL: http://elasticsearch:9200/
  HAYSTACK_SEARCH: "False"
  HAYSTACK_SEARCH_RESULTS_PER_PAGE: "200"
  IS_CELERY: "False"
  LDAP_ALWAYS_UPDATE_USER: "true"
  LDAP_BIND_DN: CN=Users,DC=ad,DC=example,DC=com
  LDAP_ENABLED: "False"
  LDAP_GROUP_SEARCH_DN: OU=Groups,DC=ad,DC=example,DC=com
  LDAP_GROUP_SEARCH_FILTERSTR: (objectClass=group)
  LDAP_MIRROR_GROUPS: "True"
  LDAP_SERVER_URL: ldap://example.com
  LDAP_USER_ATTR_MAP_EMAIL_ADDR: mailPrimaryAddress
  LDAP_USER_ATTR_MAP_FIRST_NAME: givenName
  LDAP_USER_ATTR_MAP_LAST_NAME: sn
  LDAP_USER_SEARCH_DN: OU=User,DC=ad,DC=example,DC=com
  LDAP_USER_SEARCH_FILTERSTR: (sAMAccountName=%(user)s)
  LOCKDOWN_GEONODE: "False"
  MAX_DOCUMENT_SIZE: "10"
  MEDIA_ROOT: /mnt/volumes/statics/uploaded/
  MEMCACHED_BACKEND: django.core.cache.backends.memcached.PyLibMCCache
  MEMCACHED_ENABLED: "True"
  MEMCACHED_LOCATION: geonode-k8s-memcached
  MEMCACHED_LOCK_EXPIRE: "3600"
  MEMCACHED_LOCK_TIMEOUT: "10"
  MODIFY_TOPICCATEGORY: "True"
  MONITORING_DATA_TTL: "365"
  MONITORING_ENABLED: "False"
  MONITORING_HOST_NAME: geonode-k8s-monitoring
  MONITORING_SERVICE_NAME: geonode-k8s-monitoring
  MOSAIC_ENABLED: "False"
  OGC_REQUEST_BACKOFF_FACTOR: "0.3"
  OGC_REQUEST_MAX_RETRIES: "1"
  OGC_REQUEST_POOL_CONNECTIONS: "10"
  OGC_REQUEST_POOL_MAXSIZE: "10"
  OGC_REQUEST_TIMEOUT: "600"
  PGSSLMODE: prefer
  POSTGRES_USER: postgres
  PROXY_ALLOWED_HOSTS: localhost,django,geonode,geoserver,spatialreference.org,nominatim.openstreetmap.org,dev.openlayers.org
  RESOURCE_PUBLISHING: "False"
  SENTRY_DSN: ""
  SENTRY_ENABLED: "False"
  SENTRY_ENVIRONMENT: development
  SESSION_EXPIRED_CONTROL_ENABLED: "True"
  SHOW_PROFILE_EMAIL: "True"
  SITE_HOST_SCHEMA: http
  SITEURL: http://geonode/
  SOCIALACCOUNT_WITH_GEONODE_LOCAL_SINGUP: "True"
  STATIC_ROOT: /mnt/volumes/statics/static/
  TASTYPIE_APIKEY: ""
  TIME_ENABLED: "True"
  USER_ANALYTICS_ENABLED: "True"
  USER_ANALYTICS_GZIP: "True"
  X_FRAME_OPTIONS: ALLOW-FROM ALL
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-env
  namespace: geonode
---
apiVersion: v1
binaryData:
  favicon.ico: 
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-favicon
  namespace: geonode
---
apiVersion: v1
data:
  somefixture.json: |
    [
      {
        "pk": 0,
        "model": "myapp.sample"
        "description": "nice little content"
      }
    ]
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-fixtures
  namespace: geonode
---
apiVersion: v1
data:
  geonode-k8s-settings-additions.py: ""
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-k8s-settings-additions-py
  namespace: geonode
---
apiVersion: v1
data:
  geonode-k8s-settings.py: |
    # add these import lines to the top of your geonode settings file



    THESAURUS_DEFAULT_LANG = os.environ.get("THESAURUS_DEFAULT_LANG", "en")
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-k8s-settings-py
  namespace: geonode
---
apiVersion: v1
data:
  tasks.py: |
    # -*- coding: utf-8 -*-
    #########################################################################
    #
    # Copyright (C) 2016 OSGeo
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program. If not, see <http://www.gnu.org/licenses/>.
    #
    #########################################################################
    import os
    import re
    import ast
    import json
    import time
    import logging
    import datetime
    import requests

    from urllib.parse import urlparse, urlunparse
    from invoke import task

    logger = logging.getLogger(__name__)

    GEOSERVER_STORE_NAME = "geogeonode"
    GEOSERVER_WORKSPACE_NAME = "geonode"

    @task
    def waitfordbs(ctx):
        print("**************************databases*******************************")
        db_host = os.getenv('DATABASE_HOST', 'db')
        ctx.run(f"/usr/bin/wait-for-databases {db_host}", pty=True)


    @task
    def waitforgeoserver(ctx):
        print("****************************geoserver********************************")
        while not _gs_service_availability(f"{os.environ['GEOSERVER_LOCATION']}ows"):
            print("Wait for GeoServer API availability...")
        print("GeoServer is available for HTTP calls!")

    @task
    def update(ctx):
        print("***************************setting env*********************************")
        ctx.run("env", pty=True)
        db_url = _update_db_connstring()
        geodb_url = _update_geodb_connstring()

        override_env = "$HOME/.override_env"
        if os.path.exists(override_env):
            os.remove(override_env)

        envs = {
            "local_settings": str(_localsettings()),
            "siteurl": os.environ.get("SITEURL"),
            "public_fqdn":  os.environ.get("SITEURL"),
            "public_host":  os.environ.get("SITEURL"),
            "dburl": os.environ.get("DATABASE_URL", db_url),
            "geodburl": os.environ.get("GEODATABASE_URL", geodb_url),
            "static_root": os.environ.get("STATIC_ROOT", "/mnt/volumes/statics/static/"),
            "media_root": os.environ.get("MEDIA_ROOT", "/mnt/volumes/statics/uploaded/"),
            "geoip_path": os.environ.get("GEOIP_PATH", "/mnt/volumes/statics/geoip.db"),
            "monitoring": os.environ.get("MONITORING_ENABLED", True),
            "monitoring_host_name": os.environ.get("MONITORING_HOST_NAME", "geonode"),
            "monitoring_service_name": os.environ.get("MONITORING_SERVICE_NAME", "local-geonode"),
            "monitoring_data_ttl": os.environ.get("MONITORING_DATA_TTL", 7),
            "geonode_geodb_passwd": os.environ.get("GEONODE_GEODATABASE_PASSWORD"),
            "default_backend_datastore": os.environ.get("DEFAULT_BACKEND_DATASTORE"),
            "geonode_db_passwd": os.environ.get("GEONODE_DATABASE_PASSWORD"),
            "geonode_geodb": os.environ.get("GEONODE_GEODATABASE"),
            "db_url": os.environ.get("DATABASE_URL"),
            "geodb_url": os.environ.get("GEODATABASE_URL"),
            "geonode_db": os.environ.get("GEONODE_DATABASE"),
            "gs_loc": os.environ.get('GEOSERVER_LOCATION'),
            "gs_web_ui_loc": os.environ.get("GEOSERVER_WEB_UI_LOCATION"),
            "gs_pub_loc": os.environ.get("GEOSERVER_PUBLIC_LOCATION"),
            "gs_admin_pwd": os.environ.get("GEOSERVER_ADMIN_PASSWORD"),
            "override_fn": override_env,
        }

        try:
            current_allowed = ast.literal_eval(
                os.getenv('ALLOWED_HOSTS') or
                "['{public_fqdn}', '{public_host}', 'localhost', 'django', 'geonode-k8s-geonode',]".format(**envs))
        except ValueError:
            current_allowed = []
        allowed_hosts = [str(c) for c in current_allowed] + ['"geonode-k8s-geonode"', '"django"']

        ctx.run(
            "echo export DJANGO_SETTINGS_MODULE=\
    {local_settings} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_ENABLED=\
    {monitoring} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_HOST_NAME=\
    {monitoring_host_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_SERVICE_NAME=\
    {monitoring_service_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_DATA_TTL=\
    {monitoring_data_ttl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE_PASSWORD=\
    {geonode_geodb_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DEFAULT_BACKEND_DATASTORE=\
    {default_backend_datastore} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE_PASSWORD=\
    {geonode_db_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE=\
    {geonode_geodb} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {db_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodb_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE=\
    {geonode_db} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_LOCATION=\
    {gs_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_WEB_UI_LOCATION=\
    {gs_web_ui_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_PUBLIC_LOCATION=\
    {gs_pub_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_ADMIN_PASSWORD=\
    {gs_admin_pwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export SITEURL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            'echo export ALLOWED_HOSTS=\
    "\\"{}\\"" >> {override_fn}'.format(
                allowed_hosts, **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {dburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export STATIC_ROOT=\
    {static_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MEDIA_ROOT=\
    {media_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_URL=\
    {siteurl}account/login/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_URL=\
    {siteurl}account/logout/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(f"source {override_env}", pty=True)
        print("****************************finalize env**********************************")
        ctx.run("env", pty=True)


    @task
    def migrations(ctx):
        print("**************************migrations*******************************")
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()}", pty=True)
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()} --database=datastore", pty=True)
        try:
            ctx.run(f"python manage.py rebuild_index --noinput --settings={_localsettings()}", pty=True)
        except Exception:
            pass

    @task
    def statics(ctx):
        print("**************************statics*******************************")
        try:
            static_root = os.environ.get("STATIC_ROOT", "/mnt/volumes/statics/static/")
            media_root = os.environ.get("MEDIA_ROOT", "/mnt/volumes/statics/uploaded/")

            ctx.run(f"mkdir -pv {static_root} {media_root}")
            ctx.run(
                f"python manage.py collectstatic --noinput --settings={_localsettings()}",
                pty=True,
            )
        except Exception:
            import traceback

            traceback.print_exc()


    @task
    def prepare(ctx):
        print("**********************prepare fixture***************************")
        ctx.run("rm -rf /tmp/default_oauth_apps_docker.json", pty=True)
        _prepare_oauth_fixture()
        ctx.run("rm -rf /tmp/default_site.json", pty=True)
        _prepare_site_fixture()


    @task
    def fixtures(ctx):
        print("**************************fixtures********************************")
        ctx.run(
            f"python manage.py loaddata sample_admin \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata /tmp/default_oauth_apps_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata /tmp/default_site.json \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata geonode/base/fixtures/initial_data.json \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectstatic(ctx):
        print("************************static artifacts******************************")
        ctx.run(
            f"django-admin collectstatic --noinput \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def geoserverfixture(ctx):
        print("********************geoserver fixture********************************")
        _set_geoserver_database_store()

    @task
    def monitoringfixture(ctx):
        print("*******************monitoring fixture********************************")
        ctx.run("rm -rf /tmp/default_monitoring_apps_docker.json", pty=True)
        _prepare_monitoring_fixture()
        try:
            ctx.run(
                f"django-admin loaddata /tmp/default_monitoring_apps_docker.json \
    --settings={_localsettings()}",
                pty=True,
            )
        except Exception as e:
            logger.error(f"ERROR installing monitoring fixture: {str(e)}")

    @task
    def updategeoip(ctx):
        print("**************************update geoip*******************************")
        if ast.literal_eval(os.environ.get("MONITORING_ENABLED", "False")):
            ctx.run(f"django-admin updategeoip --settings={_localsettings()}", pty=True)

    @task
    def updateadmin(ctx):
        print("***********************update admin details**************************")
        ctx.run("rm -rf /tmp/django_admin_docker.json", pty=True)
        _prepare_admin_fixture(
            os.environ.get("ADMIN_PASSWORD", "admin"), os.environ.get("ADMIN_EMAIL", "admin@example.org")
        )
        ctx.run(
            f"django-admin loaddata /tmp/django_admin_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectmetrics(ctx):
        print("************************collect metrics******************************")
        ctx.run(
            f"python -W ignore manage.py collect_metrics  \
    --settings={_localsettings()} -n -t xml",
            pty=True,
        )

    @task
    def initialized(ctx):
        print("**************************init file********************************")
        ctx.run("date > /mnt/volumes/statics/geonode_init.lock")

    @task
    def prescript(ctx):
        print("**********************geonode-k8s pre ***************************")
        print("tasks_pre_script not defined ...")

    @task
    def postscript(ctx):
        print("**********************geonode-k8s post ***************************")
        print("tasks_post_script not defined ...")


    def _update_db_connstring():
        user = os.getenv('GEONODE_DATABASE', 'geonode')
        pwd = os.getenv('GEONODE_DATABASE_PASSWORD', 'geonode')
        dbname = os.getenv('GEONODE_DATABASE', 'geonode')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        connstr = f'postgis://{user}:{pwd}@{dbhost}:{dbport}/{dbname}'
        return connstr


    def _update_geodb_connstring():
        geouser = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        geopwd = os.getenv('GEONODE_GEODATABASE_PASSWORD', 'geonode_data')
        geodbname = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        geoconnstr = f'postgis://{geouser}:{geopwd}@{dbhost}:{dbport}/{geodbname}'
        return geoconnstr


    def _localsettings():
        settings = os.getenv('DJANGO_SETTINGS_MODULE', 'geonode.settings')
        return settings


    def _gs_service_availability(url):
        import requests
        try:
            r = requests.request("get", url, verify=False)
            r.raise_for_status()  # Raises a HTTPError if the status is 4xx, 5xxx
        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:
            logger.error(f"GeoServer connection error is {e}")
            return False
        except requests.exceptions.HTTPError as er:
            logger.error(f"GeoServer HTTP error is {er}")
            return False
        else:
            logger.info("GeoServer API are available!")
            return True


    def _prepare_oauth_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "oauth2_provider.application",
                "pk": 1001,
                "fields": {
                    "skip_authorization": True,
                    "created": "2018-05-31T10:00:31.661Z",
                    "updated": "2018-05-31T11:30:31.245Z",
                    "algorithm": "RS256",
                    "redirect_uris": f"{urlunparse(upurl)}geoserver/index.html",
                    "name": "GeoServer",
                    "authorization_grant_type": "authorization-code",
                    "client_type": "confidential",
                    "client_id": str(os.environ["OAUTH2_CLIENT_ID"]),
                    "client_secret": str(os.environ["OAUTH2_CLIENT_SECRET"]),
                    "user": ["admin"],
                },
            }
        ]
        with open("/tmp/default_oauth_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_site_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "sites.site",
                "pk": 1,
                "fields": {"domain": str(upurl.hostname), "name": str(upurl.hostname)},
            }
        ]
        with open("/tmp/default_site.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_monitoring_fixture():
        pub_ip = os.getenv('GEONODE_LB_HOST_IP')
        print(f"Public Hostname or IP is {pub_ip}")
        pub_port = os.getenv('GEONODE_LB_PORT')
        print(f"Public PORT is {pub_port}")

        d = "1970-01-01 00:00:00"
        default_fixture = [
            {
                "fields": {"active": True, "ip": str(pub_ip), "name": str(os.environ["MONITORING_HOST_NAME"])},
                "model": "monitoring.host",
                "pk": 1,
            },
            {"fields": {"active": True, "ip": "geonode-k8s-geoserver", "name": "geoserver"}, "model": "monitoring.host", "pk": 2},
            {
                "fields": {
                    "name": str(os.environ["MONITORING_SERVICE_NAME"]),
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 1,
                },
                "model": "monitoring.service",
                "pk": 1,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeonode",
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 3,
                },
                "model": "monitoring.service",
                "pk": 2,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 4,
                },
                "model": "monitoring.service",
                "pk": 3,
            },
            {
                "fields": {
                    "name": "default-geoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 2,
                },
                "model": "monitoring.service",
                "pk": 4,
            },
        ]
        with open("/tmp/default_monitoring_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_admin_fixture(admin_password, admin_email):
        from django.contrib.auth.hashers import make_password

        d = datetime.datetime.now()
        mdext_date = f"{d.isoformat()[:23]}Z"
        default_fixture = [
            {
                "fields": {
                    "date_joined": mdext_date,
                    "email": admin_email,
                    "first_name": "",
                    "groups": [],
                    "is_active": True,
                    "is_staff": True,
                    "is_superuser": True,
                    "last_login": mdext_date,
                    "last_name": "",
                    "password": make_password(admin_password),
                    "user_permissions": [],
                    "username": "admin",
                },
                "model": "people.Profile",
                "pk": 1000,
            }
        ]
        with open("/tmp/django_admin_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    ##############################################################
    # added by mwall for https://github.com/zalf-rdm/geonode-k8s #
    ##############################################################
    def _set_geoserver_database_store():
        ''' checks if a db store is already created in geoserver, if not create one '''

        print("Check if geoserver store is already set up ...")
        url = '{}rest/workspaces/{}/datastores/'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        headers = {'Content-Type': 'text/xml'}
        auth = (os.environ.get("GEOSERVER_ADMIN_USER"), os.getenv('GEOSERVER_ADMIN_PASSWORD'))

        try:
            r = requests.get(url, headers=headers, auth=auth)
            data = r.json()
            for datastore in data["dataStores"]["dataStore"]:
                if datastore["name"] == GEOSERVER_STORE_NAME:
                    print("Found datastore \"{}\" on geoserver, skipping creation ... ".format(GEOSERVER_STORE_NAME))
                    return
        except:
            print("ERROR: Could not get datastore information from geoserver, trying to create ...")

        print("create new datastore \"{}\" on geoserver ...".format(GEOSERVER_STORE_NAME))
        db_user = database = os.getenv('GEONODE_GEODATABASE')
        db_password = os.getenv('GEONODE_GEODATABASE_PASSWORD')
        db_host = os.getenv('DATABASE_HOST')
        db_port = os.getenv('DATABASE_PORT')
        url = '{}rest/workspaces/{}/datastores'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        data = """
              <dataStore>
                <name>{}</name>
                <connectionParameters>
                  <host>{}</host>
                  <port>{}</port>
                  <database>{}</database>
                  <user>{}</user>
                  <passwd>{}</passwd>
                  <dbtype>postgis</dbtype>
                </connectionParameters>
              </dataStore>
            """.format(GEOSERVER_STORE_NAME, db_host, db_port, database, db_user, db_password)
        try:
            r = requests.post(url, headers=headers, auth=auth,data=data)
            print("Datastore created ...")
        except:
            print("ERROR: Something went wrong while creating datastore ...")
            return
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-tasks-py
  namespace: geonode
---
apiVersion: v1
data:
  uwsgi.ini: |
    [uwsgi]
    uwsgi-socket = 0.0.0.0:8000
    http-socket = 0.0.0.0:8001
    # pidfile = /tmp/geonode.pid

    chdir = /usr/src/geonode/
    module = geonode.wsgi:application

    strict = false
    master = true
    enable-threads = true
    vacuum = true                        ; Delete sockets during shutdown
    single-interpreter = true
    die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
    need-app = true

    # logging
    # path to where uwsgi logs will be saved
    logto = /var/log/geonode.log

    touch-reload = /usr/src/geonode/geonode/wsgi.py
    buffer-size = 32768

    harakiri = 800
    py-callos-afterfork = true

    max-requests = 1000
    max-worker-lifetime = 3600
    reload-on-rss = 2048
    worker-reload-mercy = 60

    cheaper-algo = busyness
    processes = 128
    cheaper = 8
    cheaper-initial = 16
    cheaper-overload = 1
    cheaper-step = 16

    cheaper-busyness-multiplier = 30
    cheaper-busyness-min = 20
    cheaper-busyness-max = 70
    cheaper-busyness-backlog-alert = 16
    cheaper-busyness-backlog-step = 2

    # daemonize = /var/log/uwsgi/geonode.log
    # cron = -1 -1 -1 -1 -1 /usr/local/bin/python /usr/src/geonode/manage.py collect_metrics -n
kind: ConfigMap
metadata:
  name: geonode-k8s-geonode-uwsgi-ini
  namespace: geonode
---
apiVersion: v1
data:
  DATABASE_HOST: geonode-postgresql
  DATABASE_PORT: "5432"
  DJANGO_URL: http://geonode-k8s-geonode/
  ENABLE_JSONP: "true"
  FORCE_REINIT: "true"
  GEONODE_GEODATABASE: geodata
  GEONODE_GEODATABASE_SCHEMA: public
  GEONODE_HOST_IP: localhost
  GEONODE_LB_HOST_IP: geonode
  GEOSERVER_JAVA_OPTS: -Xms1G -Xmx2G -Djava.awt.headless=true -Dgwc.context.suffix=gwc
    -XX:+UnlockDiagnosticVMOptions -XX:+LogVMOutput -XX:LogFile=/var/log/jvm.log -XX:PerfDataSamplingInterval=500
    -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:-UseGCOverheadLimit -XX:+UseConcMarkSweepGC
    -XX:ParallelGCThreads=4 -Dfile.encoding=UTF8 -Djavax.servlet.request.encoding=UTF-8
    -Djavax.servlet.response.encoding=UTF-8 -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=false
    -DGS-SHAPEFILE-CHARSET=UTF-8 -DGEOSERVER_CSRF_DISABLED=true -DPRINT_BASE_URL=http://geonode/geoserver/pdf
    -DALLOW_ENV_PARAMETRIZATION=true -Xbootclasspath/a:/usr/local/tomcat/webapps/geoserver/WEB-INF/lib/marlin-0.9.3-Unsafe.jar
    -Dsun.java2d.renderer=org.marlin.pisces.MarlinRenderingEngine
  NGINX_BASE_URL: http://geonode
  SUBSTITUTION_URL: http://geonode
  outFormat: text/javascript
kind: ConfigMap
metadata:
  name: geonode-k8s-geoserver-env
  namespace: geonode
---
apiVersion: v1
data:
  notifier.xml: |
    <notificationConfiguration>
      <queueSize>1000</queueSize>
      <notificator>
        <queueSize>1000</queueSize>
        <processorThreads>1</processorThreads>
        <messageFilter>type='Catalog'</messageFilter>
        <genericProcessor>
          <geonodeEncoder />
          <topicSender>
            <username>rabbituser</username>
            <password>rabbit_password</password>
            <host>geonode-k8s-rabbitmq</host>
            <port>5672</port>
            <virtualHost>/</virtualHost>
            <exchangeName>geonode</exchangeName>
            <routingKey>geoserver.catalog</routingKey>
          </topicSender>
        </genericProcessor>
      </notificator>
      <notificator>
        <queueSize>1000</queueSize>
        <processorThreads>10</processorThreads>
        <messageFilter>type='Data'</messageFilter>
        <genericProcessor>
          <geonodeEncoder />
          <topicSender>
            <username>rabbituser</username>
            <password>rabbit_password</password>
            <host>geonode-k8s-rabbitmq</host>
            <port>5672</port>
            <virtualHost>/</virtualHost>
            <exchangeName>geonode</exchangeName>
            <routingKey>geoserver.data</routingKey>
          </topicSender>
        </genericProcessor>
      </notificator>
    </notificationConfiguration>
kind: ConfigMap
metadata:
  name: geonode-k8s-geoserver-notifier-xml
  namespace: geonode
---
apiVersion: v1
data:
  geonode.conf: "server {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n\n
    \ # resolver is required because we use variables as upstream\n  # resolver kube-dns.kube-system.svc
    8.8.8.8 8.8.4.4 valid=300s;\n\n  include /etc/nginx/mime.types;\n\n  # This is
    the main geonode conf\n  charset     utf-8;\n\n  # max upload size\n  client_max_body_size
    100G;\n  client_body_buffer_size 256K;\n  large_client_header_buffers 4 64k;\n
    \ proxy_read_timeout 600s;\n\n  fastcgi_hide_header Set-Cookie;\n\n  etag on;\n\n
    \ # compression\n  gzip on;\n  gzip_vary on;\n  gzip_proxied any;\n  gzip_http_version
    1.1;\n  gzip_disable \"MSIE [1-6]\\.\";\n  gzip_buffers 16 8k;\n  gzip_min_length
    1100;\n  gzip_comp_level 6;\n  gzip_types\n    text/css\n    text/javascript\n
    \   text/xml\n    text/plain\n    application/xml\n    application/xml+rss\n    application/javascript\n
    \   application/x-javascript\n    application/json;\n\n  location = /favicon.ico
    {\n    alias /mnt/volumes/statics/static/img/favicon.ico;\n  }\n\n\n  # GeoNode\n
    \ location /static/ {\n    alias /mnt/volumes/statics/static/;\n    client_max_body_size
    2G;\n\n    location ~* \\.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$
    {\n      gzip_static always;\n      expires 30d;\n      access_log off;\n      add_header
    Pragma \"public\";\n      add_header Cache-Control \"max-age=31536000, public\";\n
    \   }\n  }\n\n  # GeoNode Upload\n  location /uploaded/ {\n    client_max_body_size
    2G;\n\n    alias /mnt/volumes/statics/uploaded/;\n    location ~* \\.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$
    {\n      gzip_static always;\n      expires 30d;\n      access_log off;\n      add_header
    Pragma \"public\";\n      add_header Cache-Control \"max-age=31536000, public\";\n
    \   }\n  }\n\n  location ~ ^/celery-monitor/? {\n    # Using a variable is a trick
    to let Nginx start even if upstream host is not up yet\n    # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)\n
    \   set $upstream geonode-k8s-geonode:5555;\n\n    rewrite ^/celery-monitor/?(.*)$
    /$1 break;\n\n    sub_filter '=\"/' '=\"/celery-monitor/';\n    sub_filter_last_modified
    on;\n    sub_filter_once off;\n\n    # proxy_pass http://unix:/tmp/flower.sock:/;\n
    \   proxy_pass http://$upstream;\n    proxy_redirect off;\n    proxy_set_header
    Host $host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header
    Connection \"upgrade\";\n    proxy_http_version 1.1;\n  }\n\n\n\n  # GeoServer\n
    \ location /geoserver {\n    client_max_body_size 2G;\n    proxy_set_header Host
    $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto
    $scheme;\n    proxy_pass http://geonode-k8s-geoserver:8080;\n  }\n\n\n  # external
    PYCSW forward \n  location /catalogue/csw {\n    client_max_body_size 2G;\n\n
    \   # compression\n    gzip on;\n    gzip_types\n      text/xml\n      text/plain\n
    \     application/xml\n      application/xml+rss\n      application/json;\n\n
    \   proxy_pass http://geonode-k8s-pycsw:8000;\n    proxy_set_header Host $host;\n
    \   proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For
    $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n
    \ }\n\n\n  location / {\n    client_max_body_size 2G;\n\n    # FIXME: Work around
    /proxy sometimes using a mix of public/internal URL to geonode...\n    rewrite_log
    on;\n    #rewrite ^/proxy/(.*)url=http?://geonode(:\\d+)?/geoserver(.*) /proxy/$1url=http://geoserver:8080$3
    last;\n\n    if ($request_method = OPTIONS) {\n      add_header Access-Control-Allow-Methods
    \"GET, POST, PUT, PATCH, OPTIONS\";\n      add_header Access-Control-Allow-Headers
    \"Authorization, Content-Type, Accept\";\n      add_header Access-Control-Allow-Credentials
    true;\n      add_header Content-Length 0;\n      add_header Content-Type text/plain;\n
    \     add_header Access-Control-Max-Age 1728000;\n      return 200;\n    }\n    add_header
    Access-Control-Allow-Credentials false;\n    add_header Access-Control-Allow-Headers
    \"Content-Type, Accept, Authorization, Origin, User-Agent\";\n    add_header Access-Control-Allow-Methods
    \"GET, POST, PUT, PATCH, OPTIONS\";\n\n    proxy_connect_timeout       600s;\n
    \   proxy_send_timeout          600s;\n    proxy_read_timeout          600s;\n
    \   send_timeout                600s;\n    proxy_redirect              off;\n
    \   proxy_set_header            Host $host;\n    proxy_set_header            X-Real-IP
    $remote_addr;\n    proxy_set_header            X-Forwarded-Host $server_name;\n
    \   proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;\n
    \   proxy_set_header            X-Forwarded-Proto $scheme;\n\n    # uwsgi_params\n
    \   include /etc/nginx/uwsgi_params;\n\n    # proxy_pass http://$upstream;\n    uwsgi_pass
    geonode-k8s-geonode:8000;\n    uwsgi_read_timeout 300s;\n    # when a client closes
    the connection then keep the channel to uwsgi open. Otherwise uwsgi throws an
    IOError\n    uwsgi_ignore_client_abort on;\n\n    # uwsgi_params\n    include
    /etc/nginx/uwsgi_params;\n\n    location ~* \\.(?:js|jpg|jpeg|gif|png|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|woff|woff2|svg|xml)$
    {\n      gzip_static always;\n      expires 30d;\n      access_log off;\n      add_header
    Pragma \"public\";\n      add_header Cache-Control \"max-age=31536000, public\";\n
    \   }\n  }\n}\n"
kind: ConfigMap
metadata:
  name: geonode-k8s-nginx-confd
  namespace: geonode
---
apiVersion: v1
data:
  pycsw.cfg: |-
    [server]
        home=/home/pycsw
        url=$(PYCSW_SERVER_URL)
        mimetype=application/xml; charset=UTF-8
        encoding=UTF-8
        language= en-US
        maxrecords=10
        # loglevel=
        # logfile=
        # ogc_schemas_base=
        # federatedcatalogues=
        # pretty_print=
        gzip_compresslevel=0
        # domainquerytype=
        # domaincounts=
        # spatial_ranking=
        profiles=apiso
        # workers=
        timeout=30
    [manager]
        transactions=false
        # allowed_ips=
        # csw_harvest_pagesize=
    [metadata:main]
        identification_title=GeoNode pycsw Geospatial Catalogue
        identification_abstract=GeoNode-k8s pycsw Geospatial Catalogue
        identification_keywords=catalogue,discovery,metadata, geonode
        identification_keywords_type=theme
        identification_fees=None
        identification_accessconstraints=None
        provider_name=GeoNode Kubernetes
        provider_url=https://pycsw.org/
        contact_name=Lastname, Firstname
        contact_position=Position Title
        contact_address=Mailing Address
        contact_city=City
        contact_stateorprovince=Administrative Area
        contact_postalcode=Zip or Postal Code
        contact_country=Country
        contact_phone=+xx-xxx-xxx-xxxx
        contact_fax=+xx-xxx-xxx-xxxx
        contact_email=Email Address
        contact_url=Contact URL
        contact_hours=Hours of Service
        contact_instructions=During hours of service.  Off on weekends.
        contact_role=pointOfContact
    [repository]
        database=${PYCSW_REPOSITORY_DATABASE_URI}
        mappings=/etc/pycsw/pycsw-mappings.py
        table=base_resourcebase
        # filter=
    [metadata:inspire]
        enabled="true"
        languages_supported=eng,gre
        default_language=eng
        date=YYYY-MM-DD
        gemet_keywords=Utility and governmental services
        conformity_service=notEvaluated
        contact_name=Organization Name
        contact_email=Email Address
        temp_extent=YYYY-MM-DD/YYYY-MM-DD
kind: ConfigMap
metadata:
  name: geonode-k8s-pycsw-cfg
  namespace: geonode
---
apiVersion: v1
data:
  DATABASE_HOST: geonode-k8s-postgres
  DATABASE_PORT: "5432"
  GEONODE_DATABASE: geonode
  GEONODE_DATABASE_SCHEMA: public
kind: ConfigMap
metadata:
  name: geonode-k8s-pycsw-env
  namespace: geonode
---
apiVersion: v1
data:
  pycsw-mappings.py: |-
    MD_CORE_MODEL = {
      "typename": "pycsw:CoreMetadata",
      "outputschema": "http://pycsw.org/metadata",
      "mappings": {
          "pycsw:Identifier": "uuid",
          "pycsw:Typename": "csw_typename",
          "pycsw:Schema": "csw_schema",

          "pycsw:MdSource": "csw_mdsource",
          "pycsw:InsertDate": "csw_insert_date",
          "pycsw:XML": "metadata_xml",
          "pycsw:AnyText": "csw_anytext",
          "pycsw:Language": "language",
          "pycsw:Title": "title",
          "pycsw:Abstract": "raw_abstract",
          "pycsw:Keywords": "keyword_csv",
          "pycsw:KeywordType": "keywordstype",
          "pycsw:Format": "spatial_representation_type_string",
          "pycsw:Source": "source",
          "pycsw:Date": "date",
          "pycsw:Modified": "date",
          "pycsw:Type": "csw_type",
          "pycsw:BoundingBox": "csw_wkt_geometry",
          "pycsw:CRS": "csw_crs",
          "pycsw:AlternateTitle": "alternate",
          "pycsw:RevisionDate": "date",
          "pycsw:CreationDate": "date",
          "pycsw:PublicationDate": "date",
          "pycsw:Organization": "organizationname",
          "pycsw:OrganizationName": "organizationname",
          "pycsw:SecurityConstraints": "securityconstraints",
          "pycsw:ParentIdentifier": "parentidentifier",
          "pycsw:TopicCategory": "topiccategory",
          "pycsw:ResourceLanguage": "language",
          "pycsw:GeographicDescriptionCode": "geodescode",
          "pycsw:Denominator": "denominator",
          "pycsw:DistanceValue": "distancevalue",
          "pycsw:DistanceUOM": "distanceuom",
          "pycsw:TempExtent_begin": "temporal_extent_start",
          "pycsw:TempExtent_end": "temporal_extent_end",
          "pycsw:ServiceType": "servicetype",
          "pycsw:ServiceTypeVersion": "servicetypeversion",
          "pycsw:Operation": "operation",
          "pycsw:CouplingType": "couplingtype",
          "pycsw:OperatesOn": "operateson",
          "pycsw:OperatesOnIdentifier": "operatesonidentifier",
          "pycsw:OperatesOnName": "operatesoname",
          "pycsw:Degree": "degree",
          "pycsw:AccessConstraints": "restriction_code",
          "pycsw:OtherConstraints": "raw_constraints_other",
          "pycsw:Classification": "classification",
          "pycsw:ConditionApplyingToAccessAndUse": "conditionapplyingtoaccessanduse",
          "pycsw:Lineage": "lineage",
          "pycsw:ResponsiblePartyRole": "responsiblepartyrole",
          "pycsw:SpecificationTitle": "specificationtitle",
          "pycsw:SpecificationDate": "specificationdate",
          "pycsw:SpecificationDateType": "specificationdatetype",
          "pycsw:Creator": "creator",
          "pycsw:Publisher": "publisher",
          "pycsw:Contributor": "contributor",
          "pycsw:Relation": "relation",
          "pycsw:Links": "download_links",
      },
    }
kind: ConfigMap
metadata:
  name: geonode-k8s-pycsw-mappings-py
  namespace: geonode
---
apiVersion: v1
data:
  geodata-password: TWJUUUxlb3lTZnhLVzR0Q0REbXowN3hTRGI1VjhJNTBuSjJLWGd1WHFURHNCYnZWZ3kwYjYxeFFYV2JsaVVKQQ==
kind: Secret
metadata:
  name: geonode-k8s-geodata-external-secrets
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  geonode-password: ZnJOeUdjbDY4Q3I5M0JDV2lhZlhOd1czN2ZpQjE5MXEzVzF0eTlhUmJ1WEdRZkZha3hvTGpOamt0Uk96NzVNWQ==
kind: Secret
metadata:
  name: geonode-k8s-geonode-external-secrets
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  ADMIN_EMAIL: c3VwcG9ydEBleGFtcGxlLmNvbQ==
  ADMIN_PASSWORD: Z2Vvbm9kZQ==
  ADMIN_USERNAME: YWRtaW4=
  DEFAULT_FROM_EMAIL: Y2hhbmdlbWVAd2ViLmRl
  DJANGO_EMAIL_HOST_PASSWORD: Y2hhbmdlbWU=
  DJANGO_EMAIL_HOST_USER: Y2hhbmdlbWU=
  LDAP_BIND_PASSWORD: cGFzc3dvcmQ=
  OAUTH2_API_KEY: ""
  OAUTH2_CLIENT_ID: SnJjaHoyb1BZM2FrbXpuZG1nVVRZcnM5Z2N6bGdvVjIwWVBTdnFhVg==
  OAUTH2_CLIENT_SECRET: ckNucDV0eG9iVW84M0VwUUVibE04ZlZqM1FUNXpiNXFSZnhOc3VQekNxWmFpUnlJb3hNNGpkZ01pWktGZmVQQkhZWENMZDdCOE5sa2ZEQlk5SEtlSVFQY3k1Q3AwOEtRTnBSSFFianBMSXRESHYxMkd2a1NlWHA2T3hhVUVUdjM=
kind: Secret
metadata:
  name: geonode-k8s-geonode-secret
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  GEOSERVER_ADMIN_PASSWORD: Z2Vvc2VydmVy
  GEOSERVER_ADMIN_USER: YWRtaW4=
  GEOSERVER_FACTORY_PASSWORD: Z2Vvc2VydmVy
  OAUTH2_API_KEY: ""
  OAUTH2_CLIENT_ID: SnJjaHoyb1BZM2FrbXpuZG1nVVRZcnM5Z2N6bGdvVjIwWVBTdnFhVg==
  OAUTH2_CLIENT_SECRET: ckNucDV0eG9iVW84M0VwUUVibE04ZlZqM1FUNXpiNXFSZnhOc3VQekNxWmFpUnlJb3hNNGpkZ01pWktGZmVQQkhZWENMZDdCOE5sa2ZEQlk5SEtlSVFQY3k1Q3AwOEtRTnBSSFFianBMSXRESHYxMkd2a1NlWHA2T3hhVUVUdjM=
kind: Secret
metadata:
  name: geonode-k8s-geoserver-secret
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  postgres-password: bUpWdWxCY244aXZ1QVc1TGRVZVpHeURWdW1LcVNBNG90Q2ZxbnRUbTFhOG52OHNYYkZtRWY4b1VTeVg3SlVIcQ==
kind: Secret
metadata:
  name: geonode-k8s-postgres-external-secrets
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  rabbitmq-erlang-cookie: aml4WUJzaVo5Uml2YUxYQzAycFR3R2p2SW8wbkh0VnU=
  rabbitmq-password: cmFiYml0X3Bhc3N3b3Jk
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq
  namespace: geonode
type: Opaque
---
apiVersion: v1
data:
  rabbitmq.conf: IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IHJhYmJpdHVzZXIKZGVmYXVsdF9wYXNzID0gQ0hBTkdFTUUKIyMgQ2x1c3RlcmluZwojIwpjbHVzdGVyX2Zvcm1hdGlvbi5wZWVyX2Rpc2NvdmVyeV9iYWNrZW5kICA9IHJhYmJpdF9wZWVyX2Rpc2NvdmVyeV9rOHMKY2x1c3Rlcl9mb3JtYXRpb24uazhzLmhvc3QgPSBrdWJlcm5ldGVzLmRlZmF1bHQKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLmludGVydmFsID0gMTAKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLm9ubHlfbG9nX3dhcm5pbmcgPSB0cnVlCmNsdXN0ZXJfcGFydGl0aW9uX2hhbmRsaW5nID0gYXV0b2hlYWwKIyBxdWV1ZSBtYXN0ZXIgbG9jYXRvcgpxdWV1ZV9tYXN0ZXJfbG9jYXRvciA9IG1pbi1tYXN0ZXJzCiMgZW5hYmxlIGd1ZXN0IHVzZXIKbG9vcGJhY2tfdXNlcnMuZ3Vlc3QgPSBmYWxzZQojZGVmYXVsdF92aG9zdCA9IGdlb25vZGUtdmhvc3QKI2Rpc2tfZnJlZV9saW1pdC5hYnNvbHV0ZSA9IDUwTUI=
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq-config
  namespace: geonode
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: geonode-k8s-geonode
  namespace: geonode
spec:
  ports:
  - name: geonode
    port: 8000
    targetPort: 8000
  - name: geonode-liveprobe
    port: 8001
    targetPort: 8001
  - name: celery
    port: 5555
    targetPort: 5555
  selector:
    org.geonode.instance: geonode-k8s-geonode
---
apiVersion: v1
kind: Service
metadata:
  name: geonode-k8s-geoserver
  namespace: geonode
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    org.geonode.instance: geonode-k8s-geoserver
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
  name: geonode-k8s-memcached
  namespace: geonode
spec:
  ports:
  - name: memcache
    nodePort: null
    port: 11211
    targetPort: memcache
  selector:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/name: memcached
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: geonode-k8s-nginx
  namespace: geonode
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    org.geonode.instance: geonode-k8s-nginx
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: geonode-k8s-pycsw
  namespace: geonode
spec:
  ports:
  - name: pycsw
    port: 8000
    targetPort: 8000
  selector:
    org.geonode.instance: geonode-k8s-pycsw
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq
  namespace: geonode
spec:
  ports:
  - name: amqp
    nodePort: null
    port: 5672
    targetPort: amqp
  - name: epmd
    nodePort: null
    port: 4369
    targetPort: epmd
  - name: dist
    nodePort: null
    port: 25672
    targetPort: dist
  - name: http-stats
    nodePort: null
    port: 15672
    targetPort: stats
  selector:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/name: rabbitmq
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq-headless
  namespace: geonode
spec:
  clusterIP: None
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: http-stats
    port: 15672
    targetPort: stats
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/name: rabbitmq
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-geonode-k8s-geonode
  namespace: geonode
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geonode-k8s-nginx
  namespace: geonode
spec:
  replicas: 1
  selector:
    matchLabels:
      org.geonode.instance: geonode-k8s-nginx
  template:
    metadata:
      annotations:
        checksum/config: fc8e58694c22f23470e9e9bb33715d0b81e01722d020fc3e731fe5639208ebf8
      labels:
        org.geonode.instance: geonode-k8s-nginx
    spec:
      containers:
      - image: nginx:1.25
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 45
          timeoutSeconds: 5
        name: nginx
        ports:
        - containerPort: 80
          name: http
        resources:
          limits:
            cpu: 800m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - mountPath: /mnt/volumes/statics
          name: persistence
          subPath: statics
        - mountPath: /mnt/volumes/statics/static/geonode/img/favicon.ico
          name: geonode-favicon
          subPath: favicon.ico
        - mountPath: /etc/nginx/conf.d
          name: nginx-confd
      terminationGracePeriodSeconds: 3
      volumes:
      - configMap:
          name: geonode-k8s-nginx-confd
        name: nginx-confd
      - configMap:
          name: geonode-k8s-geonode-favicon
        name: geonode-favicon
      - name: persistence
        persistentVolumeClaim:
          claimName: pvc-geonode-k8s-geonode
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geonode-k8s-geonode
  namespace: geonode
spec:
  replicas: 1
  selector:
    matchLabels:
      org.geonode.instance: geonode-k8s-geonode
  serviceName: geonode-k8s-geonode
  template:
    metadata:
      annotations:
        checksum/geonode-env: 5939e6ee9d95734bc345f9d414d88ec7469b9c9911f8ab705c5f983807d4e3f9
        checksum/geonode-local-settings: 760df352b71316d2bab733256fc36b13899fe6a25de4f706c309d23552bc8823
        checksum/geonode-secret: 518e4111a0a7b178f3f16e14d84b28abd8f733a22a0d960597113b152063e3e6
        checksum/geonode-settings-additions: 6eae0bf2e1eae828679a4b82ceea0669f38a82a95b51cae39cac11ea8aebdbab
        checksum/geonode-tasks-py: ec9350d3fa0f9460df5c902a70e76580b6837443a3bde27c0a7653a1eddece92
        checksum/geonode-uwsig: 6c4f99446f696d63a817d71653005bc9bfb953bc5de4883e7f3106ccb9fda270
      labels:
        org.geonode.instance: geonode-k8s-geonode
    spec:
      containers:
      - command:
        - bash
        - -c
        - |
          # install dockerize...
          wget -q https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz



          cd /usr/src/geonode/
          # Add config overrides
          cat /usr/src/geonode/geonode/geonode-k8s-settings.py >> /usr/src/geonode/geonode/settings.py
          cat /usr/src/geonode/geonode/geonode-k8s-settings-additions.py >> /usr/src/geonode/geonode/settings.py

          # Setup
          touch /usr/src/geonode/invoke.log
          dockerize -stdout /usr/src/geonode/invoke.log /usr/src/geonode/entrypoint.sh

          # Run web server
          touch /var/log/geonode.log
          dockerize -stdout /var/log/geonode.log /usr/local/bin/uwsgi --ini /usr/src/geonode/uwsgi.ini
        env:
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geonode-password
              name: geonode-k8s-geonode-external-secrets
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geodata-password
              name: geonode-k8s-geodata-external-secrets
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: geonode-k8s-postgres-external-secrets
        - name: GEODATABASE_URL
          value: postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)
        - name: DATABASE_URL
          value: postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)
        envFrom:
        - configMapRef:
            name: geonode-k8s-geonode-env
        - secretRef:
            name: geonode-k8s-geonode-secret
        - secretRef:
            name: geonode-k8s-geoserver-secret
        image: geonode/geonode:4.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http-monitor
          initialDelaySeconds: 90
          periodSeconds: 10
        name: geonode
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: http-monitor
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /
            port: http-monitor
          periodSeconds: 10
        volumeMounts:
        - mountPath: /mnt/volumes/statics
          name: persistence
          subPath: statics
        - mountPath: /geoserver_data/data
          name: persistence
          subPath: geoserver-data-dir
        - mountPath: /backup_restore
          name: persistence
          subPath: backup-restore
        - mountPath: /data
          name: persistence
          subPath: data
        - mountPath: /tmp
          name: cache-volume
        - mountPath: /usr/src/geonode/tasks.py
          name: tasks-py
          readOnly: true
          subPath: tasks.py
        - mountPath: /usr/src/geonode/entrypoint.sh
          name: entrypoint-sh
          subPath: entrypoint.sh
        - mountPath: /usr/src/geonode/uwsgi.ini
          name: uwsgi-ini
          readOnly: true
          subPath: uwsgi.ini
        - mountPath: /usr/src/geonode/geonode/geonode-k8s-settings.py
          name: geonode-k8s-settings-py
          subPath: geonode-k8s-settings.py
        - mountPath: /usr/src/geonode/geonode/geonode-k8s-settings-additions.py
          name: geonode-k8s-settings-additions-py
          readOnly: true
          subPath: geonode-k8s-settings-additions.py
        - mountPath: /usr/src/geonode/geonode/fixtures
          name: geonode-fixtures
          readOnly: true
      - command:
        - bash
        - -c
        - |
          # install dockerize...
          wget -q https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz



          cd /usr/src/geonode/



          # Add config overrides
          cat /usr/src/geonode/geonode/geonode-k8s-settings.py >> /usr/src/geonode/geonode/settings.py
          cat /usr/src/geonode/geonode/geonode-k8s-settings-additions.py >> /usr/src/geonode/geonode/settings.py
          # Setup
          touch /var/log/celery.log
          dockerize -stdout /var/log/celery.log /usr/src/geonode/entrypoint.sh celery-cmd
        env:
        - name: IS_CELERY
          value: "True"
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geonode-password
              name: geonode-k8s-geonode-external-secrets
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geodata-password
              name: geonode-k8s-geodata-external-secrets
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: geonode-k8s-postgres-external-secrets
        - name: GEODATABASE_URL
          value: postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)
        - name: DATABASE_URL
          value: postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)
        envFrom:
        - configMapRef:
            name: geonode-k8s-geonode-env
        - secretRef:
            name: geonode-k8s-geonode-secret
        - secretRef:
            name: geonode-k8s-geoserver-secret
        image: geonode/geonode:4.3.1
        imagePullPolicy: IfNotPresent
        name: celery
        ports:
        - containerPort: 5555
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 1
            memory: 1Gi
        volumeMounts:
        - mountPath: /mnt/volumes/statics
          name: persistence
          subPath: statics
        - mountPath: /geoserver_data/data
          name: persistence
          subPath: geoserver-data-dir
        - mountPath: /backup_restore
          name: persistence
          subPath: backup-restore
        - mountPath: /data
          name: persistence
          subPath: data
        - mountPath: /tmp
          name: cache-volume
        - mountPath: /usr/src/geonode/entrypoint.sh
          name: entrypoint-sh
          subPath: entrypoint.sh
        - mountPath: /usr/src/geonode/tasks.py
          name: tasks-py
          readOnly: true
          subPath: tasks.py
        - mountPath: /usr/src/geonode/geonode/geonode-k8s-settings.py
          name: geonode-k8s-settings-py
          subPath: geonode-k8s-settings.py
        - mountPath: /usr/src/geonode/geonode/geonode-k8s-settings-additions.py
          name: geonode-k8s-settings-additions-py
          readOnly: true
          subPath: geonode-k8s-settings-additions.py
        - mountPath: /usr/src/geonode/geonode/fixtures
          name: geonode-fixtures
          readOnly: true
      initContainers:
      - args:
        - -timeout=60s
        - -wait
        - tcp://geonode-postgresql:5432
        - -wait
        - tcp://geonode-k8s-rabbitmq:5672
        image: jwilder/dockerize:0.6.1
        imagePullPolicy: IfNotPresent
        name: geonode-wait-for-db-and-rabbit
      terminationGracePeriodSeconds: 3
      volumes:
      - name: persistence
        persistentVolumeClaim:
          claimName: pvc-geonode-k8s-geonode
      - configMap:
          items:
          - key: tasks.py
            path: tasks.py
          name: geonode-k8s-geonode-tasks-py
        name: tasks-py
      - configMap:
          defaultMode: 484
          items:
          - key: entrypoint.sh
            path: entrypoint.sh
          name: geonode-k8s-geonode-entrypoint-sh
        name: entrypoint-sh
      - configMap:
          defaultMode: 484
          items:
          - key: uwsgi.ini
            path: uwsgi.ini
          name: geonode-k8s-geonode-uwsgi-ini
        name: uwsgi-ini
      - configMap:
          defaultMode: 484
          items:
          - key: geonode-k8s-settings.py
            path: geonode-k8s-settings.py
          name: geonode-k8s-geonode-k8s-settings-py
        name: geonode-k8s-settings-py
      - configMap:
          defaultMode: 484
          items:
          - key: geonode-k8s-settings-additions.py
            path: geonode-k8s-settings-additions.py
          name: geonode-k8s-geonode-k8s-settings-additions-py
        name: geonode-k8s-settings-additions-py
      - configMap:
          defaultMode: 484
          items:
          - key: somefixture.json
            path: somefixture.json
          name: geonode-k8s-geonode-fixtures
        name: geonode-fixtures
      - emptyDir: {}
        name: cache-volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geonode-k8s-geoserver
  namespace: geonode
spec:
  replicas: 1
  selector:
    matchLabels:
      org.geonode.instance: geonode-k8s-geoserver
  serviceName: geonode-k8s-geoserver
  template:
    metadata:
      annotations:
        checksum/geoserver-env: 66fa4ec78ff7d0e51e8a352e03eb9b03e6e50fee20997771590ec66e8ca5db85
        checksum/geoserver-secret: 66e917abc88018f2be31742233ac24d80a04afe493d87e9a068180176cddf742
      labels:
        org.geonode.instance: geonode-k8s-geoserver
    spec:
      containers:
      - env:
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geodata-password
              name: geonode-k8s-geodata-external-secrets
        envFrom:
        - configMapRef:
            name: geonode-k8s-geoserver-env
        - secretRef:
            name: geonode-k8s-geoserver-secret
        image: geonode/geoserver:2.24.4-v1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 15
          initialDelaySeconds: 90
          periodSeconds: 5
          tcpSocket:
            port: 8080
        name: geoserver
        ports:
        - containerPort: 8080
        readinessProbe:
          failureThreshold: 15
          periodSeconds: 5
          tcpSocket:
            port: 8080
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - mountPath: /geoserver_data/data
          name: persistence
          subPath: geoserver-data-dir
        - mountPath: /mnt/volumes/statics
          name: persistence
          subPath: statics
      initContainers:
      - command:
        - sh
        - -c
        - |
          if [ ! -f /geoserver_data/data/.geoserver_data_copied ] ; then
            # Copy defaults from data container
            echo "copying geoserver_data files into volume ..."
            cp -r /tmp/geonode/downloaded/data/* /geoserver_data/data/
            touch /geoserver_data/data/.geoserver_data_copied
          else
            echo "geoserver_data files already exists, skipping copy ..."
          fi
        envFrom:
        - configMapRef:
            name: geonode-k8s-geoserver-env
        - secretRef:
            name: geonode-k8s-geoserver-secret
        image: geonode/geoserver_data:2.24.4-v1
        imagePullPolicy: IfNotPresent
        name: geoserver-data-dir
        volumeMounts:
        - mountPath: /geoserver_data/data
          name: persistence
          subPath: geoserver-data-dir
        - mountPath: /overrides
          name: geoserver-notifier-xml
      terminationGracePeriodSeconds: 3
      volumes:
      - configMap:
          name: geonode-k8s-geoserver-notifier-xml
        name: geoserver-notifier-xml
      - name: persistence
        persistentVolumeClaim:
          claimName: pvc-geonode-k8s-geonode
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
  name: geonode-k8s-memcached
  namespace: geonode
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: geonode-k8s
      app.kubernetes.io/name: memcached
  serviceName: geonode-k8s-memcached
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/instance: geonode-k8s
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcached
        app.kubernetes.io/version: 1.6.24
        helm.sh/chart: memcached-6.14.0
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: geonode-k8s
                  app.kubernetes.io/name: memcached
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MEMCACHED_PORT_NUMBER
          value: "11211"
        image: docker.io/bitnami/memcached:1.6.24-debian-12-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: memcache
          timeoutSeconds: 5
        name: memcached
        ports:
        - containerPort: 11211
          name: memcache
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: memcache
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /opt/bitnami/memcached/conf
          name: empty-dir
          subPath: app-conf-dir
        - mountPath: /tmp
          name: empty-dir
          subPath: tmp-dir
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: geonode-k8s-memcached
      volumes:
      - emptyDir: {}
        name: empty-dir
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geonode-k8s-pycsw
  namespace: geonode
spec:
  replicas: 1
  selector:
    matchLabels:
      org.geonode.instance: geonode-k8s-pycsw
  serviceName: geonode-k8s-pycsw
  template:
    metadata:
      annotations:
        checksum/pycsw-cfg: d1dd5122be63d4f24ba9d4013a5f71fa2906d0360209e5cf454aa1ac77725cd9
        checksum/pycsw-env: 3a8ee7c9ed1b6da5f465857d07213f27151163a2aa588ec4a91c7cf1bc86760d
        checksum/pycsw-mappings-py: 1c308634890196f0890102a50352f439611bdcbe78f259d80ae8322a6958bf0e
      labels:
        org.geonode.instance: geonode-k8s-pycsw
    spec:
      containers:
      - env:
        - name: PYCSW_SERVER_URL
          value: http://geonode/catalogue/csw
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: geonode-password
              name: geonode-k8s-geonode-external-secrets
        - name: PYCSW_REPOSITORY_DATABASE_URI
          value: postgresql://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)
        envFrom:
        - configMapRef:
            name: geonode-k8s-pycsw-env
        image: geopython/pycsw:2.6.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 5
        name: pycsw
        ports:
        - containerPort: 8000
          name: http
        readinessProbe:
          httpGet:
            path: /
            port: http
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - mountPath: /etc/pycsw/pycsw.cfg
          name: pycsw-cfg
          readOnly: true
          subPath: pycsw.cfg
        - mountPath: /etc/pycsw/pycsw-mappings.py
          name: pycsw-mappings-py
          readOnly: true
          subPath: pycsw-mappings.py
      initContainers:
      - args:
        - while [ $(curl -ksw "%{http_code}" "$GEONODE_ENDPOINT:8001" -o /dev/null)
          -ne 200 ]; do sleep 5; echo "health check failed . Waiting for GeoNode ($GEONODE_ENDPOINT:8001)
          ..."; done
        command:
        - /bin/sh
        - -c
        env:
        - name: GEONODE_ENDPOINT
          value: geonode-k8s-geonode
        image: alpine/curl:8.5.0
        imagePullPolicy: IfNotPresent
        name: pycsw-wait-for-geonode
      terminationGracePeriodSeconds: 3
      volumes:
      - configMap:
          defaultMode: 484
          items:
          - key: pycsw.cfg
            path: pycsw.cfg
          name: geonode-k8s-pycsw-cfg
        name: pycsw-cfg
      - configMap:
          defaultMode: 484
          items:
          - key: pycsw-mappings.py
            path: pycsw-mappings.py
          name: geonode-k8s-pycsw-mappings-py
        name: pycsw-mappings-py
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.10.7
    helm.sh/chart: rabbitmq-10.1.19
  name: geonode-k8s-rabbitmq
  namespace: geonode
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: geonode-k8s
      app.kubernetes.io/name: rabbitmq
  serviceName: geonode-k8s-rabbitmq-headless
  template:
    metadata:
      annotations:
        checksum/config: 4629d8b6e1fd7a44830950c3a175ee1aef69817862f7373902bec84c5d8e76d3
        checksum/secret: 6328f96fdc784e40c189745f8169aa7428920e6dd88c67fa18af4f131668764c
      labels:
        app.kubernetes.io/instance: geonode-k8s
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/version: 3.10.7
        helm.sh/chart: rabbitmq-10.1.19
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: geonode-k8s
                  app.kubernetes.io/name: rabbitmq
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_SERVICE_NAME
          value: geonode-k8s-rabbitmq-headless
        - name: K8S_ADDRESS_TYPE
          value: hostname
        - name: RABBITMQ_FORCE_BOOT
          value: "no"
        - name: RABBITMQ_NODE_NAME
          value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: K8S_HOSTNAME_SUFFIX
          value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_MNESIA_DIR
          value: /bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)
        - name: RABBITMQ_LDAP_ENABLE
          value: "no"
        - name: RABBITMQ_LOGS
          value: '-'
        - name: RABBITMQ_ULIMIT_NOFILES
          value: "65536"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_ERL_COOKIE
          valueFrom:
            secretKeyRef:
              key: rabbitmq-erlang-cookie
              name: geonode-k8s-rabbitmq
        - name: RABBITMQ_LOAD_DEFINITIONS
          value: "no"
        - name: RABBITMQ_DEFINITIONS_FILE
          value: /app/load_definition.json
        - name: RABBITMQ_SECURE_PASSWORD
          value: "yes"
        - name: RABBITMQ_USERNAME
          value: rabbituser
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              key: rabbitmq-password
              name: geonode-k8s-rabbitmq
        - name: RABBITMQ_PLUGINS
          value: rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap
        envFrom: null
        image: docker.io/bitnami/rabbitmq:3.10.7-debian-11-r4
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                else
                    rabbitmqctl stop_app
                fi
        livenessProbe:
          exec:
            command:
            - sh
            - -ec
            - test "$(curl -f --user rabbituser:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/healthchecks/node)"
              = '{"status":"ok"}'
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
        name: rabbitmq
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 25672
          name: dist
        - containerPort: 15672
          name: stats
        - containerPort: 4369
          name: epmd
        readinessProbe:
          exec:
            command:
            - sh
            - -ec
            - curl -f --user rabbituser:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/local-alarms
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /bitnami/rabbitmq/conf
          name: configuration
        - mountPath: /bitnami/rabbitmq/mnesia
          name: data
      initContainers: null
      securityContext:
        fsGroup: 1001
      serviceAccountName: geonode-k8s-rabbitmq
      terminationGracePeriodSeconds: 120
      volumes:
      - name: configuration
        secret:
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          secretName: geonode-k8s-rabbitmq-config
      - emptyDir: {}
        name: data
  updateStrategy:
    type: RollingUpdate
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: geonode-k8s
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
  name: geonode-k8s-memcached
  namespace: geonode
spec:
  egress:
  - {}
  ingress:
  - ports:
    - port: 11211
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: geonode-k8s
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcached
      app.kubernetes.io/version: 1.6.24
      helm.sh/chart: memcached-6.14.0
  policyTypes:
  - Ingress
  - Egress
